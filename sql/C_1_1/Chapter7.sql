-- 59. 次の口座について、取引日の取引結果を口座テーブルの残高に反映する。更新には、SET句
--     にて取引テーブルを副問い合わせするUPDATE文を用いること。
--     ・口座番号：0351333、取引日: 2022-01-11
UPDATE ACCOUNT
SET BALANCE = (SELECT (SUM(DEPOSIT_AMOUNT) - SUM(WITHDRAWAL_AMOUNT)) AS TRAIDING_BALANCE_RESULT FROM TRAIDING WHERE ACCOUNT_CODE = 0351333)
WHERE ACCOUNT_CODE = 0351333;

-- 60. 次の口座について、現在の残高と、取引日に発生した取引による入出金額それぞれの合計金額を
--     取得する。取得には、選択列リストにて取引テーブルを副問合せするSELECT文を用いること。
--     ・口座番号:1115600、取引日:2021-12-28
SELECT BALANCE, 
(SELECT (SUM(DEPOSIT_AMOUNT) - SUM(WITHDRAWAL_AMOUNT)) 
FROM TRAIDING 
WHERE ACCOUNT_CODE = 1115600 
AND DAY = '2021-12-28') AS TRAIDING_BALANCE_RESULT
FROM ACCOUNT
WHERE ACCOUNT_CODE = 1115600 AND UPDATE_AT = '2021-12-28';

-- 61. これまで1回の取引で100万円以上の入金があった口座について、口座番号、名義、残高を取得する。
--     但し、WHERE句でIN演算子を利用した副問合せを用いること。
SELECT ACCOUNT_CODE, ACCOUNT_NAME, BALANCE 
FROM ACCOUNT
WHERE ACCOUNT_CODE IN(SELECT ACCOUNT_CODE FROM TRAIDING WHERE DEPOSIT_AMOUNT >= 1000000);

-- 62. 取引テーブルの日付よりも未来の更新日を持つ口座テーブルのデータを抽出する。
--    但し、WHERE句でALL演算子を利用した副問合せを用いること。
SELECT * FROM ACCOUNT
WHERE UPDATE_AT > ALL(SELECT DAY FROM TRAIDING);

-- 63. 次の口座について、入金と出金の両方が発生した日付を抽出する。また、これまでの入金と
--     出金それぞれの最大額も合わせて抽出する。FROM句で副問合せを用いること。
--     ・口座番号：3104451
SELECT ACCOUNT_CODE, DAY, MAX(DEPOSIT_AMOUNT) AS DEPOSIT_AMOUNT_MAX, 
MAX(WITHDRAWAL_AMOUNT) AS WITHDRAWAL_AMOUNT_MAX
FROM (SELECT * FROM TRAIDING WHERE DEPOSIT_AMOUNT IS NOT NULL 
AND WITHDRAWAL_AMOUNT IS NOT NULL AND ACCOUNT_CODE = '3104451') AS NEW_TRADING_TABLE;

-- 64. 次の口座について解約の申し出があった、副問合せを使って口座テーブルから廃止
--     口座テーブルにデータを登録する。また、口座テーブルの該当データを削除する。但し、
--     データの整合性を保つことについては考慮しなくて良い。
--     ・口座番号：2761055
INSERT INTO ABOLISHMENT_ACCOUNT
SELECT ACCOUNT_CODE, ACCOUNT_NAME, TYPE, BALANCE, 
REPLACE(UPDATE_AT, '2022-01-21', '2023-06-27') FROM ACCOUNT
WHERE ACCOUNT_CODE = '2761055';
DELETE FROM ACCOUNT WHERE ACCOUNT_CODE = '2761055';

